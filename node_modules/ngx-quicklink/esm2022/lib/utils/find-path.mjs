import { PRIMARY_OUTLET } from '@angular/router';
export const findPath = (config, route) => {
    config = config.slice();
    const parent = new Map();
    const visited = new Set();
    while (config.length) {
        const el = config.shift();
        if (!el) {
            continue;
        }
        visited.add(el);
        if (el === route)
            break;
        let children = el.children || [];
        const current = el._loadedRoutes || [];
        for (const route of current) {
            if (route && route.children) {
                children = children.concat(route.children);
            }
        }
        children.forEach((r) => {
            if (visited.has(r))
                return;
            parent.set(r, el);
            config.push(r);
        });
    }
    let path = '';
    let current = route;
    while (current) {
        if (isPrimaryRoute(current)) {
            path = `/${current.path}${path}`;
        }
        else {
            path = `/(${current.outlet}:${current.path}${path})`;
        }
        current = parent.get(current);
    }
    // For routes with empty paths (the resulted string will look like `///section/sub-section`)
    return path.replace(/[\/]+/, '/');
};
function isPrimaryRoute(route) {
    return route.outlet === PRIMARY_OUTLET || !route.outlet;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmluZC1wYXRoLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vcHJvamVjdHMvbmd4LXF1aWNrbGluay9zcmMvbGliL3V0aWxzL2ZpbmQtcGF0aC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsY0FBYyxFQUFTLE1BQU0saUJBQWlCLENBQUM7QUFFeEQsTUFBTSxDQUFDLE1BQU0sUUFBUSxHQUFHLENBQUMsTUFBZSxFQUFFLEtBQVksRUFBVSxFQUFFO0lBQ2hFLE1BQU0sR0FBRyxNQUFNLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDeEIsTUFBTSxNQUFNLEdBQUcsSUFBSSxHQUFHLEVBQWdCLENBQUM7SUFDdkMsTUFBTSxPQUFPLEdBQUcsSUFBSSxHQUFHLEVBQVMsQ0FBQztJQUNqQyxPQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUU7UUFDcEIsTUFBTSxFQUFFLEdBQUcsTUFBTSxDQUFDLEtBQUssRUFBRSxDQUFDO1FBQzFCLElBQUksQ0FBQyxFQUFFLEVBQUU7WUFDUCxTQUFTO1NBQ1Y7UUFDRCxPQUFPLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxDQUFDO1FBQ2hCLElBQUksRUFBRSxLQUFLLEtBQUs7WUFBRSxNQUFNO1FBQ3hCLElBQUksUUFBUSxHQUFHLEVBQUUsQ0FBQyxRQUFRLElBQUksRUFBRSxDQUFDO1FBQ2pDLE1BQU0sT0FBTyxHQUFJLEVBQVUsQ0FBQyxhQUFhLElBQUksRUFBRSxDQUFDO1FBQ2hELEtBQUssTUFBTSxLQUFLLElBQUksT0FBTyxFQUFFO1lBQzNCLElBQUksS0FBSyxJQUFJLEtBQUssQ0FBQyxRQUFRLEVBQUU7Z0JBQzNCLFFBQVEsR0FBRyxRQUFRLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxRQUFRLENBQUMsQ0FBQzthQUM1QztTQUNGO1FBQ0QsUUFBUSxDQUFDLE9BQU8sQ0FBQyxDQUFDLENBQVEsRUFBRSxFQUFFO1lBQzVCLElBQUksT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQUUsT0FBTztZQUMzQixNQUFNLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNsQixNQUFNLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBQ2pCLENBQUMsQ0FBQyxDQUFDO0tBQ0o7SUFDRCxJQUFJLElBQUksR0FBRyxFQUFFLENBQUM7SUFDZCxJQUFJLE9BQU8sR0FBc0IsS0FBSyxDQUFDO0lBRXZDLE9BQU8sT0FBTyxFQUFFO1FBQ2QsSUFBSSxjQUFjLENBQUMsT0FBTyxDQUFDLEVBQUU7WUFDM0IsSUFBSSxHQUFHLElBQUksT0FBTyxDQUFDLElBQUksR0FBRyxJQUFJLEVBQUUsQ0FBQztTQUNsQzthQUFNO1lBQ0wsSUFBSSxHQUFHLEtBQUssT0FBTyxDQUFDLE1BQU0sSUFBSSxPQUFPLENBQUMsSUFBSSxHQUFHLElBQUksR0FBRyxDQUFDO1NBQ3REO1FBQ0QsT0FBTyxHQUFHLE1BQU0sQ0FBQyxHQUFHLENBQUMsT0FBTyxDQUFDLENBQUM7S0FDL0I7SUFFRCw0RkFBNEY7SUFDNUYsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsQ0FBQztBQUNwQyxDQUFDLENBQUM7QUFFRixTQUFTLGNBQWMsQ0FBQyxLQUFZO0lBQ2xDLE9BQU8sS0FBSyxDQUFDLE1BQU0sS0FBSyxjQUFjLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDO0FBQzFELENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBQUklNQVJZX09VVExFVCwgUm91dGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5leHBvcnQgY29uc3QgZmluZFBhdGggPSAoY29uZmlnOiBSb3V0ZVtdLCByb3V0ZTogUm91dGUpOiBzdHJpbmcgPT4ge1xuICBjb25maWcgPSBjb25maWcuc2xpY2UoKTtcbiAgY29uc3QgcGFyZW50ID0gbmV3IE1hcDxSb3V0ZSwgUm91dGU+KCk7XG4gIGNvbnN0IHZpc2l0ZWQgPSBuZXcgU2V0PFJvdXRlPigpO1xuICB3aGlsZSAoY29uZmlnLmxlbmd0aCkge1xuICAgIGNvbnN0IGVsID0gY29uZmlnLnNoaWZ0KCk7XG4gICAgaWYgKCFlbCkge1xuICAgICAgY29udGludWU7XG4gICAgfVxuICAgIHZpc2l0ZWQuYWRkKGVsKTtcbiAgICBpZiAoZWwgPT09IHJvdXRlKSBicmVhaztcbiAgICBsZXQgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbiB8fCBbXTtcbiAgICBjb25zdCBjdXJyZW50ID0gKGVsIGFzIGFueSkuX2xvYWRlZFJvdXRlcyB8fCBbXTtcbiAgICBmb3IgKGNvbnN0IHJvdXRlIG9mIGN1cnJlbnQpIHtcbiAgICAgIGlmIChyb3V0ZSAmJiByb3V0ZS5jaGlsZHJlbikge1xuICAgICAgICBjaGlsZHJlbiA9IGNoaWxkcmVuLmNvbmNhdChyb3V0ZS5jaGlsZHJlbik7XG4gICAgICB9XG4gICAgfVxuICAgIGNoaWxkcmVuLmZvckVhY2goKHI6IFJvdXRlKSA9PiB7XG4gICAgICBpZiAodmlzaXRlZC5oYXMocikpIHJldHVybjtcbiAgICAgIHBhcmVudC5zZXQociwgZWwpO1xuICAgICAgY29uZmlnLnB1c2gocik7XG4gICAgfSk7XG4gIH1cbiAgbGV0IHBhdGggPSAnJztcbiAgbGV0IGN1cnJlbnQ6IFJvdXRlIHwgdW5kZWZpbmVkID0gcm91dGU7XG5cbiAgd2hpbGUgKGN1cnJlbnQpIHtcbiAgICBpZiAoaXNQcmltYXJ5Um91dGUoY3VycmVudCkpIHtcbiAgICAgIHBhdGggPSBgLyR7Y3VycmVudC5wYXRofSR7cGF0aH1gO1xuICAgIH0gZWxzZSB7XG4gICAgICBwYXRoID0gYC8oJHtjdXJyZW50Lm91dGxldH06JHtjdXJyZW50LnBhdGh9JHtwYXRofSlgO1xuICAgIH1cbiAgICBjdXJyZW50ID0gcGFyZW50LmdldChjdXJyZW50KTtcbiAgfVxuXG4gIC8vIEZvciByb3V0ZXMgd2l0aCBlbXB0eSBwYXRocyAodGhlIHJlc3VsdGVkIHN0cmluZyB3aWxsIGxvb2sgbGlrZSBgLy8vc2VjdGlvbi9zdWItc2VjdGlvbmApXG4gIHJldHVybiBwYXRoLnJlcGxhY2UoL1tcXC9dKy8sICcvJyk7XG59O1xuXG5mdW5jdGlvbiBpc1ByaW1hcnlSb3V0ZShyb3V0ZTogUm91dGUpIHtcbiAgcmV0dXJuIHJvdXRlLm91dGxldCA9PT0gUFJJTUFSWV9PVVRMRVQgfHwgIXJvdXRlLm91dGxldDtcbn1cbiJdfQ==