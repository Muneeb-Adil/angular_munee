import { Injectable, InjectionToken } from '@angular/core';
import * as i0 from "@angular/core";
import * as i1 from "@angular/router";
import * as i2 from "./prefetch-registry.service";
const requestIdleCallback = typeof window !== 'undefined'
    ? window.requestIdleCallback ||
        function (cb) {
            const start = Date.now();
            return setTimeout(function () {
                cb({
                    didTimeout: false,
                    timeRemaining: function () {
                        return Math.max(0, 50 - (Date.now() - start));
                    }
                });
            }, 1);
        }
    : () => { };
const observerSupported = () => typeof window !== 'undefined' ? !!window.IntersectionObserver : false;
export const LinkHandler = new InjectionToken('LinkHandler');
export class ObservableLinkHandler {
    constructor(loader, registry, ngZone) {
        this.loader = loader;
        this.registry = registry;
        this.ngZone = ngZone;
        this.elementLink = new Map();
        this.observer = observerSupported()
            ? new IntersectionObserver(entries => {
                entries.forEach(entry => {
                    if (!this.observer) {
                        return;
                    }
                    if (entry.isIntersecting) {
                        const link = entry.target;
                        const routerLink = this.elementLink.get(link);
                        if (!routerLink || !routerLink.urlTree)
                            return;
                        this.registry.add(routerLink.urlTree);
                        this.observer.unobserve(link);
                        requestIdleCallback(() => {
                            this.loader.preload().subscribe(() => void 0);
                        });
                    }
                });
            })
            : null;
    }
    register(el) {
        this.elementLink.set(el.element, el);
        this.ngZone.runOutsideAngular(() => {
            if (!this.observer) {
                return;
            }
            this.observer.observe(el.element);
        });
    }
    // First call to unregister will not hit this.
    unregister(el) {
        if (!this.observer) {
            return;
        }
        if (this.elementLink.has(el.element)) {
            this.observer.unobserve(el.element);
            this.elementLink.delete(el.element);
        }
    }
    supported() {
        return observerSupported();
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: ObservableLinkHandler, deps: [{ token: i1.RouterPreloader }, { token: i2.PrefetchRegistry }, { token: i0.NgZone }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: ObservableLinkHandler, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: ObservableLinkHandler, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.RouterPreloader }, { type: i2.PrefetchRegistry }, { type: i0.NgZone }] });
export class PreloadLinkHandler {
    constructor(loader, registry) {
        this.loader = loader;
        this.registry = registry;
    }
    register(el) {
        this.registry.add(el.urlTree);
        requestIdleCallback(() => this.loader.preload().subscribe(() => void 0));
    }
    unregister(_) { }
    supported() {
        return true;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: PreloadLinkHandler, deps: [{ token: i1.RouterPreloader }, { token: i2.PrefetchRegistry }], target: i0.ɵɵFactoryTarget.Injectable }); }
    static { this.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: PreloadLinkHandler, providedIn: 'root' }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.2", ngImport: i0, type: PreloadLinkHandler, decorators: [{
            type: Injectable,
            args: [{ providedIn: 'root' }]
        }], ctorParameters: () => [{ type: i1.RouterPreloader }, { type: i2.PrefetchRegistry }] });
//# sourceMappingURL=data:application/json;base64,